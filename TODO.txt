

when calling controllers, or in general.... hmm we should have a messages
system to client. So if controller retsult in success, then perhaps a message : ""
that will be disdplayied in footer og modal 

   result_message : "som eaction was performed",

   dialog_message : "soma ction performed"

   so we have to options to show messages on clinet. Either in footer, or a as dialog_message'


idea: client.log

  so during copde,m we can add severa log message to client, log, then when server response it returns a 
  array of client log to clinet. If a client log is returned, then like zoom dialog, 
  is should open a wia list of log messages... nicely formatted,

      created custoemr

      updated customer dicyumtes

      checed stock for itmes...

      ...

shoud we use mongose ????

https://www.npmjs.com/package/mongoose


//Field validation code.
eks. email. ser ud til format valideres allere i client.. der er ogs√• nice.
men regex til validering skal jo hentes fra field templates (Eller model)

seperate database for unit test.
in config file, define database name for running unit test.
  then before test, db schemasync.. and use that db


strign field vs text field,
a string field, shoud be a on liner.
a test field, should me a multi liner,

a file upload fields. tempales:

  perhaps. file_upload_small  (Stored in a blob)
           file_upload_large  (stored in a file location)

pasword hasing:

     * Mock hash implementation for testing
     * In production, this would use a proper hashing algorithm like bcrypt
     
menu....

   documentation for fields is in field template,   wich makes no sence...
   it should be on the model....

   also... documentation  should be just one field
   
   documentation should be exported as tool top to client



calling action from pages...
  also, how to send current rec.. with it!!




delete record
create new record


list forms



--- refactor optimizations ----


Implement proper authentication: The current token verification is a placeholder (return true). Implement JWT-based authentication.

Improve error handling: Implement consistent error handling and logging across the application.

Standardize coding style: Implement ESLint and Prettier for consistent code formatting.

Add JSDoc documentation: Improve code documentation, especially for API endpoints and model methods.

Optimize socket service: The current implementation has unnecessary reconnection logic and could be more efficient.

Optimize database queries: Review and optimize database access patterns in the ORM.

Refactor the models system: The current model system seems complex - consider simplifying it.

Implement HTTPS: Ensure all connections use HTTPS in production.

Add proper CSRF protection: Implement CSRF tokens for added security.

Documentation: Create comprehensive developer documentation.



